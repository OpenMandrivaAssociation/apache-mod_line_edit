<IfDefine HAVE_LINE_EDIT>
    <IfModule !mod_line_edit.c>
        LoadModule line_edit_module    extramodules/mod_line_edit.so
    </IfModule>
</IfDefine>

<IfModule mod_line_edit.c>

    # LELineEnd
    # 
    #     LELineEnd UNIX|MAC|DOS|NONE|ANY|CUSTOM [char]
    # 
    #     This tells the parser what characters in the text to interpret as
    #     line-endings:
    # 
    #         * UNIX - the line end is the traditional Unix \n.
    #         * MAC - the line end is the old MacOS \r. Note that modern MacOSX
    #                 is Unix-based.
    #         * DOS - the line end is the MSDOS and Windows sequence \r\n.
    #         * ANY - Any of the above will be interpreted as a line break
    #                 (with \r\n treated as one, not two, linebreaks). This is
    #                 the default.
    #         * NONE - This will treat the entire document as a single line,
    #                  enabling multi-line search-and-replace. Note that this
    #                  will incur a substantial performance penalty for larger
    #                  documents, as it requires an entire document to be loaded
    #                  into memory and processed in a single operation.
    #         * CUSTOM - This enables you to partition the input by splitting on
    #                    some character other than a conventional line end. 
    # 
    #     When you use LELineEnd Custom, you must specify a second
    #     single-character argument, which is the character to split the input
    #     on. For all other LELineEnd options, any second argument will be
    #      ignored.
    #
    # LERewriteRule
    # 
    #     LERewriteRule from-pattern to-pattern [flags]
    # 
    #     This directive defines a search-and-replace edit rule that will be
    #     applied to the text.
    # 
    #         * The search string from-pattern may be a literal string or a
    #           regular expression.
    #         * The replacement string to-pattern may be a literal string, or
    #           may include backreferences $1-$9 in the case of a regular
    #           expression match.
    #         * The optional Flags argument may contain any combination of:
    #               o R - This rule is a regular expression search-and-replace.
    #               o i - Use case-insensitive matching on from-pattern.
    #               o m - Support multi-line regexp matching (in conjunction
    #                     with the R flag and LELineEnd None).
    #               o V - Support environment variables in to-pattern. The
    #                     string ${var} will be replaced with the value of the
    #                     environment variable var.

    # FilterProvider textedit line-editor resp=Content-Type $text/
    # FilterChain textedit

    # AddOutputFilter	line-editor	.txt .css .js

    # SetOutputFilter	line-editor
    # SetEnv	LineEdit "text/plain;text/css;text/javascript"

</IfModule>
